{"cmd": "r\"\"\"°°°\n# Data Visualization\n\nThis notebook is meant for data visualization and (potential) preprocessing before using the data for model training. Our data is stored on XetHub, and we will use the Python SDK they provide to access our data without the need for local copies. \n\nFirst, installation of `pyxet` and other dependencies:\n°°°\"\"\"\n# |%%--%%| <sdycpZXZrM|nMxrpLiwao>\n\n%pip install pyxet\n%pip install polars\n%pip install pandas\n%pip install numpy\n%pip install pyarrow\n\n#|%%--%%| <nMxrpLiwao|7BYmUih6BP>\nr\"\"\"°°°\nNow, let's install all the relevant libraries:\n°°°\"\"\"\n# |%%--%%| <7BYmUih6BP|pfw6CUAGvu>\n\nimport pyxet         # make xet:// protocol available   \nimport pandas as pd \nimport polars as pl  # faster alternative to pandas\nimport numpy as np\nimport pyarrow\nimport matplotlib.pyplot as plt\n\nfs = pyxet.XetFS()\n\n# |%%--%%| <pfw6CUAGvu|nFFgVYu23E>\nr\"\"\"°°°\n## Data Loading \n\nNow, let's access our data and load it into `pd.DataFrame` objects,\n°°°\"\"\"\n# |%%--%%| <nFFgVYu23E|XDe5SYSB0k>\n\n# get the drug training and testing data\ndf_drugs_train = pl.read_csv('xet://alt2177/mllm-data/main/data/drug_data/drugsComTrain_raw.tsv', separator = '\\t')\ndf_drugs_test = pl.read_csv('xet://alt2177/mllm-data/main/data/drug_data/drugsComTest_raw.tsv', separator = '\\t')\ndf_drugs_train.head(10)\n\n#|%%--%%| <XDe5SYSB0k|iSvjEduknc>\n\ndf_drugs_train.select(pl.col[165907]\n\n#|%%--%%| <iSvjEduknc|mxG2mMa32O>\n\n# get the shape of the training and testing sets\nprint(df_drugs_train.shape)\nprint(df_drugs_test.shape)\n\n# |%%--%%| <mxG2mMa32O|7D4EMr5SJM>\n\n# preview one of the reviews\ndf_drugs_train[\"review\"][0]\n\n# |%%--%%| <7D4EMr5SJM|Gk50aixwSm>\nr\"\"\"°°°\n## Data Description / Visualization\n\nWe now begin EDA, first looking at some simple summary statistics, checking for null values, and getting a feel for the data.\n°°°\"\"\"\n#|%%--%%| <Gk50aixwSm|2yb9jP9hP0>\n\n# basic descriptions\ndf_drugs_train.describe()\n# |%%--%%| <2yb9jP9hP0|FSBP8jnmPJ>\n\n# check for null values\ndf_drugs_train.select(pl.all().is_null().sum())\n#|%%--%%| <FSBP8jnmPJ|pbGCONbb9F>\nr\"\"\"°°°\nNow, we look at the unique values we have in our columns\n°°°\"\"\"\n#|%%--%%| <pbGCONbb9F|5Dl54EdTfK>\n\n# check our ratings and see what unique values we have\ndf_drugs_train.select(['rating']).unique()\n#|%%--%%| <5Dl54EdTfK|C5cPMqN2mq>\n\n# check unique conditions\ndf_drugs_train.select(['condition']).unique()['condition']\n\n#|%%--%%| <C5cPMqN2mq|qoJEnEq3Zi>\n\n# check unique drug names \ndf_drugs_train.select(['drugName']).unique()['drugName']\n#|%%--%%| <qoJEnEq3Zi|t2c45vrRJz>\n\n# look at the first 20 reviews\ndf_drugs_train.select(['review']).unique()['review'][0:20]\n#|%%--%%| <t2c45vrRJz|j9uuzqiR0A>\nr\"\"\"°°°\nWe now turn our attention to the reviews themselves. Some basic visualization:\n°°°\"\"\"\n#|%%--%%| <j9uuzqiR0A|HWc657s24h>\n\nreview_word_count = df_drugs_train.select(['review']).map_rows(lambda t: len(t[0].split(\" \")))\nreview_word_count.describe()\n#|%%--%%| <HWc657s24h|N9hsnW9cp9>\n\n# create figure \nplt.figure(figsize = (10, 6))\n\n# Remove top and right borders\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# plotting\nplt.hist(df_drugs_train['rating'], bins = 10, color = \"cornflowerblue\", label = \"Rating\")\nplt.axvline(df_drugs_train['rating'].mean(), color = \"gold\", linestyle = \"dashed\", linewidth = 2, label = \"Average Rating\")\nplt.title(\"Distribution of Drug Ratings\")\nplt.savefig(\"rating_dist\")\nplt.xlabel('Score (from 1 to 10)')\nplt.ylabel('Frequency')\nplt.legend()\nplt.show()\n\n#|%%--%%| <N9hsnW9cp9|X6s3rvd4gD>\n\n# create figure \nplt.figure(figsize = (10, 6))\n\n# Remove top and right borders\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# plotting useful count (the number of users who found a particular review helpful)\nplt.hist(df_drugs_train['usefulCount'], range = [0, 200], bins = 100, color = \"violet\")\nplt.xlabel('Number of users who found the review helpful')\nplt.ylabel('Frequency')\nplt.title(\"Distribution of Useful Ratings\")\nplt.savefig(\"rating_dist\")\nplt.legend()\nplt.show()\n\n# |%%--%%| <X6s3rvd4gD|fjfsqaLMgZ>\n\nprint(np.quantile(review_word_count, 0.95))\nprint(np.quantile(review_word_count, 0.05)) # 14 words\n#|%%--%%| <fjfsqaLMgZ|ihHMAnQ3Pc>\nplt.figure(figsize = (10, 6))\n\n# Remove top and right borders\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\nplt.title(\"Distribution of Review Word Counts\")\nplt.xlabel('Word Count')\nplt.ylabel('Frequency')\nplt.xlim(14, 200)\nplt.hist(review_word_count, bins = 200, color = \"lightskyblue\")\nplt.axvline(review_word_count.mean(), color = \"gold\", linestyle = \"dashed\", linewidth = 2, label = \"Average Word Count\")\nplt.show()\n\n#|%%--%%| <ihHMAnQ3Pc|CDPsEMelgx>\n\nplt.figure(figsize = (10, 6))\n\n# Remove top and right borders\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n\nreview_char_count = df_drugs_train.select(['review']).map_rows(lambda t: len(t[0]))\nprint(list(review_char_count))\nplt.hist(review_word_count, bins = 200, color = \"lightskyblue\")\nplt.hist(review_char_count, bins = 500, alpha = 0.5, color = \"violet\")\nplt.xlim(14, 1000)\nplt.show()\n#for rev in df_drugs_train.filter(review_word_count['map'] < 5)['review']:\n#   print(rev.strip('\\n'))\n\n\n#    print()\n#review_word_count\n#df_drugs_train.filter(review_word_count['map'] > 1000)['review']\n#df_drugs_train.filter(review_word_count['map'] < 5)['review']\n\n\n\n# |%%--%%| <CDPsEMelgx|GWBY7VfJKo>\nr\"\"\"°°°\nThere are 5 reviews over 1000 words and two of them look identical. There might be more duplicates in the review column.\n°°°\"\"\"\n# |%%--%%| <GWBY7VfJKo|MicaUlg1rK>\n\n\n# |%%--%%| <MicaUlg1rK|oBD1Dolf6c>\nr\"\"\"°°°\nGetting the basic descriptive stats, data types, etc.\n°°°\"\"\"\n# |%%--%%| <oBD1Dolf6c|lXWP6Ypvta>\n\n# Get descripive stats\ndf_drugs_train.describe()\n\n# |%%--%%| <lXWP6Ypvta|JpGtxbn2QX>\n\n# get column names and their dtypes\ndf_drugs_train.schema\n\n# |%%--%%| <JpGtxbn2QX|v4l3KuCL1t>\n\n# check if all the rows are unique \nprint(df_drugs_train.is_unique().all())\n\n# |%%--%%| <v4l3KuCL1t|gtNzKvKgCv>\n\n# check for nulls\ndf_drugs_train.null_count()\n\n# |%%--%%| <gtNzKvKgCv|6jlsonLhbC>\nr\"\"\"°°°\nSince there are over 800 `null` values in `condition`, let's take a closer look. This column represents the medical conditions of respondents, so we cannot just drop those. Instead, we fill with `not_reported`. This ensures no null values.\n°°°\"\"\"\n# |%%--%%| <6jlsonLhbC|rDXvdNTgrT>\n\n# fill missing values with \"not_reported\"\ndf_filled = df_drugs_train.with_columns(\n    pl.col(\"condition\").fill_null(pl.lit(\"not_reported\")),\n)\n\n# check if we no longer have null values\nprint(df_filled.null_count())\n\n# |%%--%%| <rDXvdNTgrT|2eqByAP9BG>\nr\"\"\"°°°\n°°°\"\"\"\n# |%%--%%| <2eqByAP9BG|AZDKulL54M>\n\n\n\n# |%%--%%| <AZDKulL54M|eq7QM3PAp6>\n\n\n\n# |%%--%%| <eq7QM3PAp6|KY2m8XKprf>\nr\"\"\"°°°\n# XSUM Dataset\n°°°\"\"\"\n# |%%--%%| <KY2m8XKprf|QoAjM81eKc>\n\ndf_xsum = pl.from_pandas(pd.read_parquet('xet://alt2177/mllm-data/main/data/xsum/predictions.parquet'))\nprint(df_xsum.shape)\ndf_xsum.head()\n\n# |%%--%%| <QoAjM81eKc|VP6E0UOBhb>\n\n\n\n# |%%--%%| <VP6E0UOBhb|uVCqSdLwbK>\nr\"\"\"°°°\n# CNN/Dailymail Dataset\n°°°\"\"\"\n# |%%--%%| <uVCqSdLwbK|mnxXyXMNXV>\n\nfiles_cnn = fs.ls('xet://alt2177/mllm-data/main/data/cnn_dailymail/1.0.0')\ndf_dir = pl.from_dicts(files_cnn)\nprint(\"==================== Current Working Dir ls =====================\")\nprint(df_dir.head())\n# print(df_dir.select([\"name\"]).head(1).item())\ndf_cnn = pl.from_pandas(pd.read_parquet('xet://{}'.format(df_dir.select([\"name\"]).head(1).item())))\n# df_cnn = pl.from_pandas(pd.read_parquet('xet://alt2177/mllm-data/main/data/cnn_dailymail/1.0.0/test-00000-of-00001.parquet'))\nprint(df_cnn.shape)\ndf_cnn.head()\n\n# |%%--%%| <mnxXyXMNXV|Nv3yr1vYoS>\n\n", "cmd_opts": " -s --md_cell_start=r\\\"\\\"\\\"°°°", "import_complete": 1, "terminal": "nvimterm"}