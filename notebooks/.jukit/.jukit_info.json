<<<<<<< HEAD
{"cmd": "\nmy_mllm = mllm.MLLM()\n\n\n", "cmd_opts": " --cell_id=mFTlzIca0h -s", "import_complete": 1, "terminal": "nvimterm"}
=======
{"cmd": "r\"\"\"°°°\n# Cleaning `condition` feature\n\nNotebook used for cleaning and visualizing the `condition` column in the Drug Review dataset.\n\nFirst, installation of `pyxet` and other dependencies:\n°°°\"\"\"\n# |%%--%%| <diUQuwgpou|N6xHq8Vfgn>\n\n%pip install pyxet\n%pip install polars\n%pip install pandas\n%pip install numpy\n%pip install pyarrow\n\n# |%%--%%| <N6xHq8Vfgn|8xbt8E955f>\n\nimport pyxet         # make xet:// protocol available   \nimport pandas as pd \nimport polars as pl  # faster alternative to pandas\nimport numpy as np\nimport pyarrow\nimport matplotlib.pyplot as plt\n\nfs = pyxet.XetFS()\n\n# |%%--%%| <8xbt8E955f|5nuJSLA6BX>\nr\"\"\"°°°\n# Drug Review Dataset (UCI)\n°°°\"\"\"\n# |%%--%%| <5nuJSLA6BX|K7859xiLFZ>\n\n# get the drug training and testing data\ndf_drugs_train = pl.read_csv('xet://alt2177/mllm-data/main/data/drug_data/drugsComTrain_raw.tsv', separator = '\\t')\ndf_drugs_test = pl.read_csv('xet://alt2177/mllm-data/main/data/drug_data/drugsComTest_raw.tsv', separator = '\\t')\nprint(df_drugs_train.head())\n\n# |%%--%%| <K7859xiLFZ|k1yBOtm0bB>\n\n# get the shape of our data\nprint(\"Training Data shape: {}\".format(df_drugs_train.shape))\nprint(\"Testing Data shape: {}\".format(df_drugs_test.shape))\n\n# |%%--%%| <k1yBOtm0bB|8VRIzRNq6P>\nr\"\"\"°°°\n## `condition` column\n°°°\"\"\"\n# |%%--%%| <8VRIzRNq6P|U4GTRIc7tf>\nr\"\"\"°°°\n### Training Data\n°°°\"\"\"\n# |%%--%%| <U4GTRIc7tf|wjx34txpEn>\n\ndf_drugs_train[\"condition\"].describe()\n\n# |%%--%%| <wjx34txpEn|lVUucYD6qv>\n\n# fill missing values with \"not_reported\"\ndf_filled = df_drugs_train.with_columns(\n    pl.col(\"condition\").fill_null(pl.lit(\"not_reported\")),\n)\n\n# check if we no longer have null values\nprint(df_filled.null_count())\n\n# |%%--%%| <lVUucYD6qv|O9ZFtotMkz>\n\n# set the number of rows we want to see\npl.Config.set_tbl_rows(100)\n\n# get only the condition column\nprint(df_filled.select(\"condition\").unique())\n\n# |%%--%%| <O9ZFtotMkz|ibTsQadMzG>\nr\"\"\"°°°\nThere are many entries with html tags like `</span>` inside, which should not be showing up in our data.\n°°°\"\"\"\n# |%%--%%| <ibTsQadMzG|7H2tQJbaBz>\n\n# removing html tags\ndf_condition = df_filled.filter(~pl.col(\"condition\").str.contains(\"</span>\"))\n\n\n# |%%--%%| <7H2tQJbaBz|XesbJrEdVV>\n\n\n\n# |%%--%%| <XesbJrEdVV|qcZhzioRic>\n\n# df_drugs_train.dtypes  #= [Int64, String, String, String, Float64, String, Int64]\ndf_drugs_train.describe()\ndf_drugs_train.select(pl.all().is_null().sum())\n\n#df_drugs_train.select(['rating']).unique()\n# for cond in df_drugs_train.select(['condition']).unique()['condition']:\n#     print(cond)\n# for drug in df_drugs_train.select(['drugName']).unique()['drugName']:\n#     print(drug)\n# for rev in df_drugs_train.select(['review']).unique()['review'][0:20]:\n#     print(rev)\n\nreview_word_count = df_drugs_train.select(['review']).map_rows(lambda t: len(t[0].split(\" \")))\n#plt.hist(review_word_count)\nreview_word_count.describe()\nplt.hist(df_drugs_train['rating'], bins = 10)\nplt.hist(df_drugs_train['usefulCount'], bins = 100)\n#df_drugs_train.select(['usefulCount']).unique()\n\n\n# |%%--%%| <qcZhzioRic|2ZCjld2fWS>\n\nprint(\"garbage\")\n\n# |%%--%%| <2ZCjld2fWS|pXAWsCfcSG>\nr\"\"\"°°°\nGetting the basic descriptive stats, data types, etc.\n°°°\"\"\"\n# |%%--%%| <pXAWsCfcSG|nS5DroNUfj>\n\n# Get descripive stats\ndf_drugs_train.describe()\n\n# |%%--%%| <nS5DroNUfj|OlV6xQTntx>\n\n# get column names and their dtypes\ndf_drugs_train.schema\n\n# |%%--%%| <OlV6xQTntx|cSOfEKT7rL>\n\n# check if all the rows are unique \nprint(df_drugs_train.is_unique().all())\n\n# |%%--%%| <cSOfEKT7rL|ZMVUgXcWNy>\n\n# check for nulls\ndf_drugs_train.null_count()\n\n# |%%--%%| <ZMVUgXcWNy|JMfpV6ugQZ>\nr\"\"\"°°°\nSince there are over 800 `null` values in `condition`, let's take a closer look. This column represents the medical conditions of respondents, so we cannot just drop those. Instead, we fill with `not_reported`. This ensures no null values.\n°°°\"\"\"\n# |%%--%%| <JMfpV6ugQZ|j7TNXSjNVt>\n\n# fill missing values with \"not_reported\"\ndf_filled = df_drugs_train.with_columns(\n    pl.col(\"condition\").fill_null(pl.lit(\"not_reported\")),\n)\n\n# check if we no longer have null values\nprint(df_filled.null_count())\n\n# |%%--%%| <j7TNXSjNVt|G8DaFCgU8F>\nr\"\"\"°°°\n### Testing Data\n°°°\"\"\"\n# |%%--%%| <G8DaFCgU8F|xFf4mu8omd>\n\n\n\n# |%%--%%| <xFf4mu8omd|lbG08gwvDy>\n\n", "cmd_opts": " -s --md_cell_start=r\\\"\\\"\\\"°°°", "import_complete": 1, "terminal": "nvimterm"}
>>>>>>> bobby_testing
